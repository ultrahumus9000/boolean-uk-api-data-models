// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOWBASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Designer {
  id      Int      @id @default(autoincrement())
  name    String
  outfits Outfit[]
}

model Guest {
  id        Int            @id @default(autoincrement())
  name      String
  events    EventToGuest[]
  purchases Purchase[]

}

model Model {
  id      Int      @id @default(autoincrement())
  name    String
  outfits Outfit[]
}

model EventToGuest {
  id      Int   @id @default(autoincrement())
  guest   Guest @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  @@unique([guestId, eventId])
}

model Event {
  id      Int            @id @default(autoincrement())
  date    DateTime       @db.Date
  theme   String
  address String
  outfits Outfit[]
  guests  EventToGuest[]


  @@map("events")
}

model Outfit {
  id         Int       @id @default(autoincrement())
  season     Season    @default(Summer)
  price      Float
  designer   Designer  @relation(fields: [designerId], references: [id], onDelete: Cascade)
  designerId Int
  model      Model     @relation(fields: [modelId], references: [id])
  modelId    Int
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId Int?
  event      Event?    @relation(fields: [eventId], references: [id])
  eventId    Int?

  @@map("outfits")
}

model Purchase {
  id      Int      @id @default(autoincrement())
  outfits Outfit[]
  guest   Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId Int


  @@map("purchases")
}

enum Season {
  Spring
  Summer
  Autumn
  Winter
}
